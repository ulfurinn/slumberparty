name: Elixir CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  test:
    services:
      db:
        image: postgres:14
        ports: ['5432:5432']
        env:
          POSTGRES_USER: slumber
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    runs-on: ubuntu-latest
    name: Test on OTP ${{matrix.otp}} / Elixir ${{matrix.elixir}}
    strategy:
      matrix:
        otp: ['25.1.1']
        elixir: ['1.14.2']

    steps:
    - name: Set up Elixir
      id: beam
      uses: erlef/setup-beam@v1
      with:
        otp-version: ${{matrix.otp}}
        elixir-version: ${{matrix.elixir}}

    - name: Checkout code
      uses: actions/checkout@v3

    - name: Cache deps
      id: cache-deps
      uses: actions/cache@v3
      env:
        cache-name: cache-elixir-deps
      with:
        path: deps
        key: ${{ runner.os }}-mix-${{ env.cache-name }}-${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          ${{ runner.os }}-mix-${{ env.cache-name }}-

    - name: Cache compiled build
      id: cache-build
      uses: actions/cache@v3
      env:
        cache-name: cache-compiled-build
      with:
        path: _build
        key: ${{ runner.os }}-mix-${{ env.cache-name }}-${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          ${{ runner.os }}-mix-${{ env.cache-name }}-
          ${{ runner.os }}-mix-

    # Don't cache PLTs based on mix.lock hash, as Dialyzer can incrementally update even old ones
    # Cache key based on Elixir & Erlang version (also useful when running in matrix)
    - name: Restore PLT cache
      uses: actions/cache@v2
      id: plt_cache
      with:
        key: |
          ${{ runner.os }}-${{ steps.beam.outputs.elixir-version }}-${{ steps.beam.outputs.otp-version }}-plt
        path: |
          priv/plts

    - name: Install dependencies
      run: mix deps.get

    - name: Compile in dev mode
      run: mix compile --warnings-as-errors

    - name: Check Formatting
      run: mix format --check-formatted

    - name: Check vulnerable packages
      run: mix deps.audit

    # {:mix_audit, "~> 2.0", only: [:dev, :test], runtime: false}
    - name: Check retired packages
      run: mix hex.audit

    - name: Create PLTs
      if: steps.plt_cache.outputs.cache-hit != 'true'
      run: mix dialyzer --plt

    # {:credo, "~> 1.6", only: [:dev, :test], runtime: false}
    - name: Credo
      run: mix credo

    - name: Compile in test mode
      env:
        MIX_ENV: test
      run: mix compile --warnings-as-errors

    - name: Run tests
      run: mix test

    # {:dialyxir, "~> 1.0", only: [:dev], runtime: false}
    - name: Run dialyzer
      run: mix dialyzer --format github
